import {get} from "lodash";
import internalServerError from "@framework/helpers/internalServerError.js";
import Model from "@framework/model/model.js";


class {{controllerName name}} extends Model {
	
	constructor() {
		super({
			tableName: "{{ name }}"
		})
	}

	async view{{ controllerName name }}(_, args) {
		try {
			const {id} = args;
			let find = await this.model.findByPk(id);
			if (find) {
				find.successMessageType = "Success";
				find.successMessage = "Item fetched";
				return find;
			}else {
				return {
					errorMessageType: "{{controllerName name}} not found", 
					errorMessage: "{{controllerName name}} not found, please try again",
					statusCode: 'NOT_FOUND'
				}
			}
		} catch (e) {
			return internalServerError(e);
		}
	}
	async create{{ controllerName name }}(_, args) {
		try {
			this.instance = null;
			let create = await this.save(args);
			let instance = create.getInstance();
			if (instance) {
				instance.statusCode = "CREATED";
				instance.successMessageType = "Created";
				instance.successMessage = "{{controllerName name}} created successfully";
				return instance;
			}else {
				return internalServerError({message: "Something went wrong"});
			}
		} catch (e) {
			return internalServerError(e);
		}
	}
	async update{{ controllerName name }}(_, args) {
		try {
			const {id} = args;
			let item =  await this.findOne(id);
			let update = await item.save(args);;
			let updatedItem = update.getInstance();
			updatedItem.successMessageType = "Updated";
			updatedItem.successMessage = "{{controllerName name}} updated successfully";
			return updatedItem;
		} catch (e) {
			return internalServerError(e);
		}
	}
	async list{{ controllerName name }}(_, args) {
		try {
			let items = await this.paginate(args);
			return items.list;
		} catch (e) {
			return internalServerError(e);
		}
	}
	async delete{{ controllerName name }}(_, args) {
		try {
			const {id} = args;
			let find =  await this.findOne(id);
			let item = find.getInstance();
			if (!item) {
				return {
					statusCode: "NOT_FOUND",
					errorMessageType: "{{controllerName name}} deleted",
					errorMessage: "{{ controllerName name }} deleted already"
				}
			}
			await find.delete();
			return {
				statusCode: "OK",
				successMessageType: "{{ controllerName name }} deleted",
				successMessage: "{{ controllerName name }} deleted successfully"
			}
		} catch (e) {
			return internalServerError(e);
		}
	}

}


export default new {{controllerName name}}();